const { Telegraf, session, Scenes: { WizardScene, Stage }, Markup } = require('telegraf');
const { message } = require('telegraf/filters');
require('dotenv').config()
const axios = require('axios')

// const exit_keyboard = Markup.keyboard(['exit']).oneTime()
// const remove_keyboard = Markup.removeKeyboard()

const nameHandler = Telegraf.on('text', async ctx => {
    ctx.scene.state.city = ctx.message.text
    await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —É–ª–∏—Ü—É')
    return ctx.wizard.next()
})
const ageHandler = Telegraf.on('text', async ctx => {
    ctx.session.city = ctx.scene.state.city
    ctx.session.street = ctx.message.text
    await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É')
    return ctx.scene.leave()
})

const infoScene = new WizardScene('infoScene', nameHandler, ageHandler)
infoScene.enter(ctx => ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥'))

const stage = new Stage([infoScene])
stage.hears('exit', ctx => ctx.scene.leave())

const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session(), stage.middleware())


bot.start((ctx) => {
    ctx.telegram.sendMessage(ctx.from.id, '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –ø–ª–∞–Ω–æ–≤—ã–º –æ—Ç–∫–ª—é—á–µ–Ω–∏—è–º –ø–æ –∞–¥—Ä–µ—Å—É',
        {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'subscribe' }],
                    [{ text: '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'unsubscribe' }],
                    [{ text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data: 'info' }]
                ]

            }
        })
})

// bot.command('city', (ctx) => {
//     console.log(ctx.message.text.slice(6))
// })
// bot.command('add', (ctx) => {
//     ctx.scene.enter('infoScene')
// })
bot.command('info', info)
bot.command('subscribe', subscribe)

bot.action('subscribe', subscribe)
bot.action('unsubscribe', unsubscribe)
bot.action('info', info)

function subscribe(ctx) {
    ctx.scene.enter('infoScene')
}

function unsubscribe(ctx) {
    ctx.reply('–û—Ç–ø–∏—Å–∞–Ω—ã')
}
function info(ctx) {
    if (ctx.session.city && ctx.session.street) {
        ctx.replyWithHTML(`–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –∞–¥—Ä–µ—Å—É:<b> ${capitalizeFirstLetter(ctx.session.city)} —É–ª. ${capitalizeFirstLetter(ctx.session.street)}</b>`)
    }else{
        ctx.reply('–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –ø–ª–∞–Ω–æ–≤—ã–º –æ—Ç–∫–ª—é—á–µ–Ω–∏—è–º')
    }
}
function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
// bot.help((ctx) => ctx.reply('Send me a sticker'));
// bot.on(message('sticker'), (ctx) => ctx.reply('üëç'));
// bot.hears('hi', (ctx) => ctx.reply('Hey there'));
bot.launch();

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));